# sei-curriculum Repository Maintenance and Guidelines

# Starting Out

1. Read this guide
1. Fork this repo

# Workflow

1. Make sure your local master is up-to-date with upstream/master
1. Create a branch using the naming conventions discussed below.
1. Create small, logical commits. This will make reverting new features and
   merging easier.
1. Fix any merge conflicts with the targe merge branch that may exist (see
   section on pull requests)
1. Create a pull request when you're done

# Branching

## Naming Conventions

Branches should follow the following pattern:

    <initials>-<feature-name>-<issue-number>
for example:

    nh-new-awesome-lesson-73

This helps those who are reviewing your changes to know who is making the changes and 
what issue you're working on.

## Branch System

The following branches are used for managing the course material:

Branch | Purpose | Notes
--- | --- | ---
master | Student ready material and "production ready" code. | Only use PRs to directly update this branch
solution | Contains commits that update material-directories in master to have solutions to assignments | Do not merge into master

# Issues

Issues should follow the following guidelines:

* Keep 1 issue per logical problem
* Provide more detail than the title.
* Attach lables and/or milestones as when they apply

# Pull Requests

When you're done working on a feature submit a pull request and request another
team member to review your work. (For Instructor Assistants, please have a lead
instructor review your work as well).

Keep the following in mind when reviewing pull requests:

  * has any updated code been tested?
  * how will this change affect the student experience?
  * how will this change affect currently outstanding branches?

## Pull Request Titles

When making a PR please start the title with the following pattern:

    fixes #<issue-number>
for example:

    fixes #73
This way when the PR gets merged Github can automagically close out the issue.

## Merge Conflicts

It is the feature branch owner's responsibility to fix any merge conflicts that
may exist. This saves the person reviewing your work time and effort. A
conflict should rarely occur unless your are not keeping your branch updated by
periodically merging in upstream changes (via `git fetch upstream/master; git
merge upstream/master` when checkedout in your feature branch).

# Solution Code

__IMPORTANT__: Currently the solution code is maintained in a branch (called
`solution`) that has `master` merged into it. Please be sure to periodically
update the `solution` branch whenver `master` is updated (especially if
template code has changed)
